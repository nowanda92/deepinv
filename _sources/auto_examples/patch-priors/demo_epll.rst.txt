
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/patch-priors/demo_epll.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_patch-priors_demo_epll.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_patch-priors_demo_epll.py:


Expected Patch Log Likelihood (EPLL) for Denoising and Inpainting
====================================================================================================

In this example we use the expected patch log likelihood (EPLL) prior EPLL proposed in `"From learning models of natural image patches to whole image restoration" <https://ieeexplore.ieee.org/document/6126278>`_. 
for denoising and inpainting of natural images.
To this end, we consider the inverse problem :math:`y = Ax+\epsilon`, where :math:`A` is either the identity (for denoising)
or a masking operator (for inpainting) and :math:`\epsilon\sim\mathcal{N}(0,\sigma^2 I)` is white Gaussian noise with standard deviation :math:`\sigma`.

.. GENERATED FROM PYTHON SOURCE LINES 10-20

.. code-block:: Python


    from deepinv.models import EPLLDenoiser
    from deepinv.optim import EPLL
    from deepinv.physics import GaussianNoise, Denoising, Inpainting
    from deepinv.utils import cal_psnr, plot
    import torch
    from deepinv.utils.demo import load_url_image, get_image_url

    device = "cuda" if torch.cuda.is_available() else "cpu"








.. GENERATED FROM PYTHON SOURCE LINES 21-26

Load test image and model
----------------------------------------
As default EPLL loads pretrained weights for the Gaussian mixture model which where estimted based
on 50 mio patches extracted from the BSDS500 dataset. An example how to estimate the parameters of GMM
is included in the demo for limited-angle CT with patch priors.

.. GENERATED FROM PYTHON SOURCE LINES 26-32

.. code-block:: Python


    url = get_image_url("CBSD_0010.png")
    test_img = load_url_image(url, grayscale=False).to(device)
    patch_size = 6
    model = EPLL(channels=test_img.shape[1], patch_size=patch_size, device=device)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://huggingface.co/deepinv/EPLL/resolve/main/GMM_BSDS_color2.pt?download=true" to /home/runner/.cache/torch/hub/checkpoints/GMM_BSDS_color2.pt
      0%|          | 0.00/35.7M [00:00<?, ?B/s]      1%|▏         | 544k/35.7M [00:00<00:06, 5.57MB/s]     22%|██▏       | 7.97M/35.7M [00:00<00:00, 48.1MB/s]     57%|█████▋    | 20.4M/35.7M [00:00<00:00, 85.8MB/s]     92%|█████████▏| 32.9M/35.7M [00:00<00:00, 104MB/s]     100%|██████████| 35.7M/35.7M [00:00<00:00, 88.4MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 33-37

Denoising
----------
In this setting, the operator :math:`A` is the identity; we set the noise level to :math:`\sigma=25/255`.
Define noise model, operator and generate observation

.. GENERATED FROM PYTHON SOURCE LINES 37-43

.. code-block:: Python


    sigma = 0.1
    noise_model = GaussianNoise(sigma)
    physics = Denoising(device=device, noise_model=noise_model)
    observation = physics(test_img)








.. GENERATED FROM PYTHON SOURCE LINES 44-48

We use the default choice of the betas in the half quadratic splitting given by
:math:`\beta \in \sigma^{-2} \{1,4,8,16,32\}`.
Generally, the betas are hyperparameters, which have to be chosen for each inverse problem separately.


.. GENERATED FROM PYTHON SOURCE LINES 48-65

.. code-block:: Python


    # Reconstruction
    x_out = model(observation, physics, batch_size=5000)

    # PSNR computation and plots.
    psnr_obs = cal_psnr(observation, test_img)
    psnr_recon = cal_psnr(x_out, test_img)

    print("PSNRs for Denoising:")
    print("Observation: {0:.2f}".format(psnr_obs))
    print("EPLL: {0:.2f}".format(psnr_recon))

    plot(
        [test_img, observation.clip(0, 1), x_out.clip(0, 1)],
        ["Ground truth", "Observation", "EPLL"],
    )




.. image-sg:: /auto_examples/patch-priors/images/sphx_glr_demo_epll_001.png
   :alt: Ground truth, Observation, EPLL
   :srcset: /auto_examples/patch-priors/images/sphx_glr_demo_epll_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PSNRs for Denoising:
    Observation: 20.00
    EPLL: 28.96




.. GENERATED FROM PYTHON SOURCE LINES 66-70

Inpainting
----------
We now turn to a noisy inpainting problem, where the operator :math:`A` is a masking operator.
Define noise model, operator and generate observation

.. GENERATED FROM PYTHON SOURCE LINES 70-77

.. code-block:: Python


    sigma = 0.01
    physics = Inpainting(
        test_img[0].shape, mask=0.7, device=device, noise_model=GaussianNoise(sigma)
    )
    observation = physics(test_img)








.. GENERATED FROM PYTHON SOURCE LINES 78-80

Here, we need a different choice of beta. To this end, we extended the default choice
by two values and optimized a constant factor via grid search.

.. GENERATED FROM PYTHON SOURCE LINES 80-98

.. code-block:: Python


    betas = [1.0, 5.0, 10.0, 40.0, 80.0, 160.0, 320.0]

    # Reconstruction
    x_out = model(observation, physics, betas=betas, batch_size=5000)

    # PSNR computation and plots
    psnr_obs = cal_psnr(observation, test_img)
    psnr_recon = cal_psnr(x_out, test_img)

    print("PSNRs for Inpainting:")
    print("Observation: {0:.2f}".format(psnr_obs))
    print("EPLL: {0:.2f}".format(psnr_recon))

    plot(
        [test_img, observation.clip(0, 1), x_out.clip(0, 1)],
        ["Ground truth", "Observation", "EPLL"],
    )



.. image-sg:: /auto_examples/patch-priors/images/sphx_glr_demo_epll_002.png
   :alt: Ground truth, Observation, EPLL
   :srcset: /auto_examples/patch-priors/images/sphx_glr_demo_epll_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PSNRs for Inpainting:
    Observation: 10.94
    EPLL: 30.43





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (2 minutes 2.927 seconds)


.. _sphx_glr_download_auto_examples_patch-priors_demo_epll.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_epll.ipynb <demo_epll.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_epll.py <demo_epll.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
